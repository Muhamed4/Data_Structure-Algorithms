#!/usr/bin/env bash
set -e
# shellcheck disable=SC2016
completions='_comp_build_and_run(){
	# Check if user has already provided "--" option
	for (( i=1; i < COMP_CWORD; i++ )); do
		if [ "${COMP_WORDS[i]}" == "--" ]; then
			return 0
		fi
	done

	local cur_word prev_word

	cur_word="${COMP_WORDS[COMP_CWORD]}"
	prev_word="${COMP_WORDS[COMP_CWORD-1]}"

	local comp
	case "$prev_word" in
		-*t*)
			# Complete binaries
			local bindir="$(command grep -P '\''^BINDIR *:?= *'\'' -m 1 Makefile | sed '\''s/BINDIR *:\?= *//'\'')"
			for comp in $(compgen -f -- "$bindir/$cur_word" | sed "s/.*$bindir\/\{1,\}\(.*\)\.cpp/\1/")
			do
				[[ "$comp" != *$bindir/* ]] && COMPREPLY+=( "$comp" )
			done
			;;
		*)
			# Complete options
			for comp in $(compgen -W "-t -r -o -c -d -h -p" -- "$cur_word")
			do
				COMPREPLY+=( "$comp" )
			done
			;;
	esac

	return 0
}
# Register bash completion
complete -o bashdefault -F _comp_build_and_run '"$0"

bindir="$(grep -P '^BINDIR *:?= *' -m 1 Makefile | sed 's/BINDIR *:\?= *//')"

show_help(){
			printf "This program compiles cpp files using make. It also runs the \
executable file and calculates the elapsed time.
The default build uses debugging configuration.\n
%s [-c|-r|-d|-h|-o|-p] [-t <cpp-file-basename>] [--] [arg ...]\n
Options:
\t-c\tclean (delete) already built files with the configuration supplied
\t-r\tbuild using release configuration
\t-d\tbuild using debug configuration, and run the debugger
\t-h\tshow this help message
\t-o\tcompile only without running the executable
\t-p\tgenerate autocompletions. Run \`eval \"\$(%s -p)\"\` to activate them.
\t-t\tcompile and run this specific target in ./%s. If this option is used
\t\tmultiple times, all the targets will get compiled only. By default, all cpp
\t\tfiles in ./%s will get compiled only. Filenames mustn't include spaces.

\t--\tsend the remaining parameters as arguments to main function (this should be the last argument)\n" "$0" "$0" "$bindir" "$bindir"
}

c=0; d=0; r=0; o=0; t=0
declare -A possible_targets targets
for bin in "$bindir"/*.cpp
do
	possible_targets+=( ["$(printf "%s" "$bin" | sed "s/.*$bindir\/\{1,\}\(.*\)\.cpp/\1/")"]="" )
done

while (( $# > 0 ))
do
	if (( t == 1 )); then
		if ! [ ${possible_targets[$1]+_} ]; then
			printf "Bad target: No such file named \"%s.cpp\" in \"%s\" directory\n" "$1" "$bindir"
			exit 1
		fi
		targets+=( ["$1"]="" )
		t=0
	else
		[ "$1" == "--" ] && shift && break
		[ "${1:0:1}" != "-" ] && break
		for (( i=1; ; i=i+1 ))
		do
			[ "${1:${i}:1}" ] || break
			char=${1:${i}:1}
			[ "$char"  == "-" ] && continue
			case "$char" in
				c|d|r|o|t) eval "$char=1";;
				p) printf "%s\n" "$completions"; exit;;
				*) show_help; [ "$char" == "h" ]; exit
			esac
		done
	fi
	shift
done
if (( t == 1 )); then
	show_help
	exit 1
fi
if (( c == 1 )); then
	make RELEASE=$r clean
fi
if (( "${#targets[@]}" == 0 )); then
	for bin in "${!possible_targets[@]}"
	do
		targets[$bin]=""
	done
fi
make -j"$(nproc)" RELEASE=$r USE_TARGETS="${!targets[*]}" all
all_targets=( "${!targets[@]}" )
only_target=${all_targets[0]}
if (( d == 1 )); then
	(( ${#targets[@]} > 1 )) && exit 1
	(which debuginfod && (pgrep debuginfod || debuginfod &))>/dev/null
	make -j"$(nproc)" debug USE_TARGETS="$only_target"
	exit
fi
if (( o == 1 )) || (( ${#targets[@]} > 1 )); then
	exit
fi
filename=$(make RELEASE=$r get_target USE_TARGETS="$only_target")
printf -- "--------------------------------------------------\n"
if command time -f "%P" true &>/dev/null; then
	command time -f "\n--------------------------------------------------\nElapsed Time: %e sec\nCPU Percentage: %P" \
		"$filename" "$@"
else
	time "$filename" "$@"
fi